rabbitmq.server.host=192.168.91.129
rabbitmq.server.port=5672
rabbitmq.server.username=admin
rabbitmq.server.password=admin
rabbitmq.server.virtualHost=/



#kafka相关配置
#指定kafka server的地址，集群配多个，中间逗号隔开
spring.kafka.bootstrap-servers=192.168.91.129:9092

#============== provider ==================
#写入失败时，重试次数。
#当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败
#当retries为0时，produce不会重复。
#retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失
spring.kafka.producer.retries=0
# 每次批量发送消息的数量，produce积累到一定数据；一次发送
spring.kafka.producer.batch-size=16384
#produce积累数据一次发送，缓存大小达到buffer-memory就发送
spring.kafka.producer.buffer-memory=33554432
#producer要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端持久化 其值可以如下
#acks=0 如果设置为0，则生产者则不会等待来自服务器的确认，该记录将立即添加到套接字缓冲区并视为已发送。这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端不会知道任何故障），为每条记录返回的偏移量始终设置为-1
#acks=1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader做出回应后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失
#acks=all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是强有力的保证，这相当于acks=-1的设置
#可以设置的值为 all -1 0 1
spring.kafka.producer.acks=1
#指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer



#================= consumer =====================
#指定默认消费者group id--》由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠group.id设置组名
spring.kafka.consumer.group-id=testGroup
#smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
spring.kafka.consumer.auto-offset-reset=earliest
# enable.auto.commit:true --> 设置自动提交offset
spring.kafka.consumer.enable-auto-commit=true
#如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
spring.kafka.consumer.auto-commit-interval=100


#指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer


